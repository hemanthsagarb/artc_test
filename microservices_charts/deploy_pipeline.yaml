##
## ###############################################################################################
##
## This software is part of Deloitteâ€™s Optimal Reality Digital Twin.
## Copyright (C) 2020, Deloitte Australia. All rights reserved.
## Created Date: 30/06/2020
## Technical Authority: Caleb Sawade
## Engagement Owner: Sean McClowry smcclowry@deloitte.com.au
##                   and Kellie Nuttall knuttall@deloitte.com.au
##
## ###############################################################################################
##
## Copyright (C) 2020, Deloitte Digital. All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
##
## * Redistributions of source code must retain the above copyright notice, this
## list of conditions and the following disclaimer.
##
## * Redistributions in binary form must reproduce the above copyright notice,
## this list of conditions and the following disclaimer in the documentation
## and/or other materials provided with the distribution.
##
## * Neither the name of the copyright holder nor the names of its contributors
## may be used to endorse or promote products derived from this software without
## specific prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
## FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
## DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
## SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
## CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
## OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
## OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
#
# Master Deployment pipeline
#

# the default agent pool
pool:
  vmImage: ubuntu-latest

# parameters are editable from the azure pipelines manual run
# todo: if these function well the deploymentEnvironment variable is surplus
parameters:
- name: EnvironmentName
  displayName: Run for which environment name 
  type: string
  default: dev
- name: Namespace
  displayName: Run for which namespace
  type: string
  default: artc-dev
- name: clusterName
  displayName: cluster to use to write to (can be parameterised based on env + client)
  type: string
  default: artc-dev
- name: clientName
  displayName: client name
  type: string
  default: artc

# global variables
variables:
  artifactFeed: or-core-model
  buildUrl: $(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=results
  workingDirectory: . # ./client_config/'{{ parameters.ClientName }}'
  EnvironmentName: '${{ parameters.EnvironmentName }}'
  clientName: '${{ parameters.clientName }}'
  Namespace: '${{ parameters.Namespace }}'

jobs:
  - job: Deploy
    displayName: Deploy all microservices
    pool: ARTC_DEV
    steps:
      - task: Bash@3
        displayName: Configure Kubeconfig
        inputs:
          script: |
            aws eks update-kubeconfig --name='${{ parameters.clusterName }}' --region=ap-southeast-2 --role-arn=arn:aws:iam::438954004210:role/trusting-administratoraccess-role
          targetType: inline
          workingDirectory: $(workingDirectory)
      - task: Bash@3
        displayName: Deploy redis
        inputs:
          script: |
            make deploy TF_BUILD=true NAMESPACE=$(Namespace) ENVIRONMENT=$(EnvironmentName) STANDALONE=true CLIENT=$(clientName)
          targetType: inline
          workingDirectory: $(workingDirectory)/microservices_charts/redis
      # - task: Bash@3
      #   displayName: Deploy nginx
      #   inputs:
      #     script: |
      #       helm repo add "bitnami" "https://charts.bitnami.com/bitnami" 
      #       helm upgrade --install ext-dns --values values.external-dns.yaml bitnami/external-dns -n kube-system
      #       helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      #       helm upgrade --install nginx-ing --values values.nginx-ingress.yaml ingress-nginx/ingress-nginx -n kube-system
      #     targetType: inline
      #     workingDirectory: $(workingDirectory)/client_configs/artc/kubesys
      # - task: Bash@3
      #   displayName: Await load balancer
      #   inputs:
      #     script: |
      #       sleep 1m
      #     targetType: inline
      #     workingDirectory: $(workingDirectory)
      - task: Bash@3
        displayName: Deploy graphql
        inputs:
          script: |
            make deploy TF_BUILD=true NAMESPACE=$(Namespace) ENVIRONMENT=$(EnvironmentName) STANDALONE=false CLIENT=$(clientName) GRAPHQL_SERVICE_IMAGE_TAG=0.21.113
          targetType: inline
          workingDirectory: $(workingDirectory)/microservices_charts/graphql_service